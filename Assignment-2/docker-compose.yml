# CODE WRITTEN BY LAURA GOLEC FOR CSU33031 ASSIGNMENT 2

version: '2'
services:

# This is the endpoint, or as stated in the brief, the cloud server
# It is only connected to one network
# The arguments passed into it are as follows:
# Own Element ID, Controller IP address, Own IP address
  endpoint:
    build:
      dockerfile:
        endpoint/Dockerfile
    command: ["FFFFFF", "172.30.0.11", "172.30.16.4"]
    networks:
      cloud:
        ipv4_address: 172.30.16.4
    depends_on:
      - controller
    
# Below are all the forwarders, they are connected to two networks each (A, and B)
# The arguments passed into them are as follows:
# Own Element ID, Controller IP for network A, Controller IP for network B, Own IP address network A, Own IP address network B
# The order of A and B does not matter   
  forwarder1:
    build:
      dockerfile:
        forwarder/Dockerfile
    command: ["AABBCC", "192.168.17.11", "129.144.50.11", "192.168.17.34", "129.144.50.22"]
    networks:
      home:
        ipv4_address: 192.168.17.34
      internet:
        ipv4_address: 129.144.50.22
    depends_on:
      - endpoint
      - controller

  forwarder2:
    build:
      dockerfile:
        forwarder/Dockerfile
    command: ["CCCCDD", "129.144.50.11", "172.30.0.11", "129.144.50.12", "172.30.0.254"]
    networks:
      internet:
        ipv4_address: 129.144.50.12
      cloud:
        ipv4_address: 172.30.0.254
    depends_on:
      - endpoint
      - controller

  forwarder3:
    build:
      dockerfile:
        forwarder/Dockerfile
    command: ["CCDDEE", "133.111.20.11", "123.134.43.11", "133.111.20.9", "123.134.43.32"]
    networks:
      home2:
        ipv4_address: 133.111.20.9
      isp:
        ipv4_address: 123.134.43.32
    depends_on:
      - endpoint
      - controller
  
  forwarder4:
    build:
      dockerfile:
        forwarder/Dockerfile
    command: ["EEEEEE", "167.120.87.11", "123.134.43.11", "167.120.87.9", "123.134.43.21"]
    networks:
      home3:
        ipv4_address: 167.120.87.9
      isp:
        ipv4_address: 123.134.43.21
    depends_on:
      - endpoint
      - controller
  
  forwarder5:
    build:
      dockerfile:
        forwarder/Dockerfile
    command: ["EEEEFF", "123.134.43.11", "129.144.50.11", "123.134.43.9", "129.144.50.32"]
    networks:
      isp:
        ipv4_address: 123.134.43.9
      internet:
        ipv4_address: 129.144.50.32
    depends_on:
      - endpoint
      - controller

# Below are all the users, they are only connected to their home networks
# The arguments passed into them follow this template:
# Own Element ID, Destination Element ID, IP address of gateway, IP address of controller, Own IP address
  user1:
    build:
      dockerfile:
        user/Dockerfile
    command: ["AAAAAA", "FFFFFF", "192.168.17.34", "192.168.17.11", "192.168.17.2"]
    networks: 
      home:
        ipv4_address: 192.168.17.2
    depends_on:
      - endpoint
      - forwarder1
      - forwarder2
      - forwarder3
      - forwarder4
      - forwarder5

  user2:
    build:
      dockerfile:
        user/Dockerfile
    command: ["AAAAAB", "AAAAAA", "133.111.20.9", "133.111.20.11", "133.111.20.3"]
    networks: 
      home2:
        ipv4_address: 133.111.20.3
    depends_on:
      - endpoint
      - forwarder1
      - forwarder2
      - forwarder3
      - forwarder4
      - forwarder5


  user3:
    build:
      dockerfile:
        user/Dockerfile
    command: ["AAAABC", "FFFFFF", "167.120.87.9", "167.120.87.11", "167.120.87.3"]
    networks: 
      home3:
        ipv4_address: 167.120.87.3
    depends_on:
      - endpoint
      - forwarder1
      - forwarder2
      - forwarder3
      - forwarder4
      - forwarder5

# The controller has IP addresses/sockets in every network as all elements need to communicate with it at least once
# The arguments passed into it are as follows:
# Own Element ID, All of its own IPs for all the networks it has sockets in
  controller:
    build:
      dockerfile:
        controller/Dockerfile
    command: ["C0C0C0", "192.168.17.11", "172.30.0.11", "129.144.50.11", "133.111.20.11", "167.120.87.11", "123.134.43.11"]
    networks:
      home:
        ipv4_address: 192.168.17.11
      cloud:
        ipv4_address: 172.30.0.11
      internet:
        ipv4_address: 129.144.50.11
      home2:
        ipv4_address: 133.111.20.11
      home3:
        ipv4_address: 167.120.87.11
      isp:
        ipv4_address: 123.134.43.11

# Used for capturing network traffic as pcap files
  tcpdump:
    image: kaazing/tcpdump
    network_mode: "host"
    volumes:
      - ./tcpdump:/tcpdump
    command: ["-i", "any", "udp", "-w", "tcpdump/tcpdump.pcap"]

# Sets up all of the networks that are used in the program
# All are bridge networks with own subnets
networks:
  home:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.17.0/24
  cloud:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
  internet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 129.144.50.0/16
  home2:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 133.111.20.0/16
  home3:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 167.120.87.0/24
  isp:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 123.134.43.0/16